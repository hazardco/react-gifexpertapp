{"version":3,"sources":["components/AddCategory.js","components/GifItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAoCeA,EAhCK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAiBrC,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAa,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,YCKjBG,EAZC,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGzB,OADAC,QAAQC,IAAI,CAACJ,KAAIC,QAAOC,QAEpB,yBAAKG,UAAU,0CACX,yBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,2BAAKA,K,uBCRJO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbR,EADa,iDACoCS,UAAUF,GAD9C,+DAEAG,MAAOV,GAFP,cAEbW,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QARvB,kBAWZc,GAXY,4CAAH,sDCiCLK,EA3BC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECHN,SAAEA,GAAe,IAAD,EAEdvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WAEPjB,EAASC,GACJiB,MAAM,SAAAC,GACHH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAItB,CAACb,IAEGc,EDb2BK,CAAanB,GAAlCU,EAHiB,EAGtBJ,KAAcO,EAHQ,EAGRA,QAQtB,OACI,kBAAC,WAAD,KACA,4BAAMb,GACJa,EAAU,cAAgB,kBAC5B,yBAAKjB,UAAU,aACLc,EAAOF,KAAK,SAAAC,GAAG,OACb,kBAAC,EAAD,eACIW,IAAKX,EAAIlB,IACJkB,UEOdY,EA3BM,WAAO,IAAD,EAEW5C,mBAAS,CAAC,cAFrB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAIvB,OACI,kBAAC,WAAD,KACI,4CACA,kBAAC,EAAD,CACIA,YAAaA,IAEjB,6BAEA,4BAEQ8C,EAAWd,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACEoB,IAAMpB,EACNA,SAAWA,UCjBrCuB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.ccb49b67.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst AddCategory = ({ setCategory }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value )\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if( inputValue.trim().length > 2 ) {\n            setCategory( cat => [inputValue, ...cat] );\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","import React from 'react';\n\nconst GifItem = ({id, title, url}) => {\n\n    console.log({id, title, url})\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt={title} />\n            <p>{ title}</p>\n        </div>\n    )\n\n}\n\nexport default GifItem;","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=zHSpaP41gASv7KoQGzwjPqbh7esIkwpF`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React, { Fragment } from 'react';\nimport GifItem from './GifItem';\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\nconst GifGrid = ({ category }) => {\n\n\n    const { data:images , loading } = useFetchGifs(category);\n\n    /*const [images, setImages] = useState([]);\n\n    \n\n  */\n\n    return (\n        <Fragment>\n        <h3>{ category }</h3>\n        { loading ? 'Cargando...' : 'Data cargada...' }\n        <div className=\"card-grid\">\n                { images.map( img => (\n                    <GifItem\n                        key={img.id}\n                        { ...img }\n                    />\n                )) }\n        </div>\n        </Fragment>\n    )\n}\n\nexport default GifGrid;","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n\n    }, [category]);\n\n    return state;\n}","import React, { Fragment, useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategory] = useState(['One Punch'])\n\n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory \n                setCategory={setCategory}\n            />\n            <hr />\n\n            <ul>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                          key={ category }\n                          category={ category }\n                          \n                          />\n                    ))\n                }\n            </ul>\n        </Fragment>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}